// <auto-generated />
using System;
using Microsoft.CSharp.RuntimeBinder;

namespace {{ Namespace }}
{
    static partial class __{{ Name }}Factory
    {
        public static {{ Name }} Create(dynamic value)
        {
            if (value is null)
                throw new ArgumentNullException(nameof(value));

            try
            {
                return new {{ Name }}({{ Parameters | array.each @(do; ret "value." + $0; end) | array.join ', ' }}){{~ if !HasProperties ~}};{{~ end }}
                {{~ if HasProperties ~}}
                {
                    {{~ for prop in Properties ~}}
                    {{ prop }} = value.{{ prop }},
                    {{~ end ~}}
                };
                {{~ end ~}}
            }
            catch (RuntimeBinderException e)
            {
                var valueAsm = ((object)value).GetType().Assembly.GetName();
                var thisAsm = typeof(__{{ Name }}Factory).Assembly.GetName();
                throw new ArgumentException(
                    $"Incompatible {nameof({{ Name }})} value. Cannot convert value from '{valueAsm.Name}, Version={valueAsm.Version}' to '{thisAsm.Name}, Version={thisAsm.Version}'.",
                    nameof(value), e);
            }
        }
    }
}