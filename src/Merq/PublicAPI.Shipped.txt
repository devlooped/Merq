#nullable enable
Merq.IAsyncCommand
Merq.IAsyncCommand<TResult>
Merq.IAsyncCommandHandler
Merq.IAsyncCommandHandler<TCommand, TResult>
Merq.IAsyncCommandHandler<TCommand, TResult>.ExecuteAsync(TCommand command, System.Threading.CancellationToken cancellation = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<TResult>!
Merq.IAsyncCommandHandler<TCommand>
Merq.IAsyncCommandHandler<TCommand>.ExecuteAsync(TCommand command, System.Threading.CancellationToken cancellation = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
Merq.ICanExecute<TCommand>
Merq.ICanExecute<TCommand>.CanExecute(TCommand command) -> bool
Merq.ICommand
Merq.ICommand<TResult>
Merq.ICommandHandler
Merq.ICommandHandler<TCommand, TResult>
Merq.ICommandHandler<TCommand, TResult>.Execute(TCommand command) -> TResult
Merq.ICommandHandler<TCommand>
Merq.ICommandHandler<TCommand>.Execute(TCommand command) -> void
Merq.IExecutable
Merq.IExecutable<TResult>
Merq.IExecutableCommandHandler<TCommand, TResult>
Merq.IExecutableCommandHandler<TCommand>
Merq.IExecuteResult
Merq.IMessageBus
Merq.IMessageBus.CanExecute<TCommand>(TCommand command) -> bool
Merq.IMessageBus.CanHandle(Merq.IExecutable! command) -> bool
Merq.IMessageBus.CanHandle<TCommand>() -> bool
Merq.IMessageBus.Execute(Merq.ICommand! command, string? callerName = null, string? callerFile = null, int? callerLine = null) -> void
Merq.IMessageBus.Execute<TResult>(Merq.ICommand<TResult>! command, string? callerName = null, string? callerFile = null, int? callerLine = null) -> TResult
Merq.IMessageBus.ExecuteAsync(Merq.IAsyncCommand! command, System.Threading.CancellationToken cancellation = default(System.Threading.CancellationToken), string? callerName = null, string? callerFile = null, int? callerLine = null) -> System.Threading.Tasks.Task!
Merq.IMessageBus.ExecuteAsync<TResult>(Merq.IAsyncCommand<TResult>! command, System.Threading.CancellationToken cancellation = default(System.Threading.CancellationToken), string? callerName = null, string? callerFile = null, int? callerLine = null) -> System.Threading.Tasks.Task<TResult>!
Merq.IMessageBus.NotifyAsync<TEvent>(TEvent e, string? callerName = null, string? callerFile = null, int? callerLine = null) -> System.Threading.Tasks.Task!
Merq.IMessageBus.Observe<TEvent>() -> System.IObservable<TEvent>!
Merq.IMessageBusExtensions
static Merq.IMessageBusExtensions.Execute<TCommand>(this Merq.IMessageBus! bus, string? callerName = null, string? callerFile = null, int? callerLine = null) -> void
static Merq.IMessageBusExtensions.Notify<TEvent>(this Merq.IMessageBus! bus, string? callerName = null, string? callerFile = null, int? callerLine = null) -> void
static Merq.IMessageBusExtensions.Notify<TEvent>(this Merq.IMessageBus! bus, TEvent e, string? callerName = null, string? callerFile = null, int? callerLine = null) -> void
static Merq.IMessageBusExtensions.NotifyAsync<TEvent>(this Merq.IMessageBus! bus, string? callerName = null, string? callerFile = null, int? callerLine = null) -> System.Threading.Tasks.Task!
Merq.TaskExtensions
static Merq.TaskExtensions.Forget(this System.Threading.Tasks.Task! task) -> void