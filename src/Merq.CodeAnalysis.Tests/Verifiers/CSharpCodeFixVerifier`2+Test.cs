// <auto-generated />
using System.Reflection;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CodeFixes;
using Microsoft.CodeAnalysis.CSharp.Testing;
using Microsoft.CodeAnalysis.Diagnostics;
using Microsoft.CodeAnalysis.Host;
using Microsoft.CodeAnalysis.Testing.Verifiers;
using Microsoft.VisualStudio.Composition;

namespace Merq;

public static partial class CSharpCodeFixVerifier<TAnalyzer, TCodeFix>
    where TAnalyzer : DiagnosticAnalyzer, new()
    where TCodeFix : CodeFixProvider, new()
{
    public class Test : CSharpCodeFixTest<TAnalyzer, TCodeFix, XUnitVerifier>
    {
        public Test()
        {
            SolutionTransforms.Add((solution, projectId) =>
            {
                // Add Superpower dependency for codefixer
                var service = solution.Workspace.Services.GetRequiredService<IAnalyzerService>();
                var loader = service.GetLoader();
                loader.AddDependencyLocation(typeof(Superpower.Parse).Assembly.Location);

                var project = solution.GetProject(projectId)
                    .AddMetadataReference(MetadataReference.CreateFromFile(typeof(IAsyncCommand).Assembly.Location))
                    .AddMetadataReference(MetadataReference.CreateFromFile(typeof(MessageBus).Assembly.Location));

                return project.Solution;
            });
        }
    }

    class AnalyzerLoader : IAnalyzerAssemblyLoader
    {
        public void AddDependencyLocation(string fullPath) => throw new System.NotImplementedException();
        public Assembly LoadFromPath(string fullPath) => throw new System.NotImplementedException();
    }
}
