<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <ItemGroup>
    <PackageReference Include="GitInfo" Version="2.2.0" PrivateAssets="all" />
  </ItemGroup>

  <PropertyGroup>
    <GenerateNuspecDependsOn>SetVersion;$(GenerateNuspecDependsOn)</GenerateNuspecDependsOn>
    <GetPackageVersionDependsOn>SetVersion;$(GetPackageVersionDependsOn)</GetPackageVersionDependsOn>
  </PropertyGroup>

  <Target Name="Version" DependsOnTargets="SetVersion;GitInfoReport">
    <Message Text="##vso[build.updatebuildnumber]$(InformationalVersion)" Importance="high" Condition="$(CI)" />
    <Message Importance="high" Text="  PackageVersion=$(PackageVersion)
  AssemblyVersion=$(AssemblyVersion)" />
  </Target>

  <Target Name="_SetLocalCommits" BeforeTargets="_GitPopulateVersionInfo" Condition="!$(CI)">
    <PropertyGroup>
      <!-- Local builds should always be commit count +1, since we'll be always working on the next version to be published. -->
      <GitCommits>$([MSBuild]::Add('$(GitCommits)', '1'))</GitCommits>
    </PropertyGroup>
  </Target>

  <!-- '$(ExcludeRestorePackageImports)' == 'true' when invoking /t:Restore -->
  <Target Name="SetVersion"
          BeforeTargets="PrepareForBuild;GetAssemblyVersion;GetPackageVersion;Pack"
          DependsOnTargets="GitVersion"
          Condition="'$(ExcludeRestorePackageImports)' != 'true' and '$(GitInfoImported)' == 'true'">

    <PropertyGroup>
      <!-- PR builds are *always* prerelease -->
      <!-- TFS case: BUILD_REASON=PullRequest and BUILD_SOURCEBRANCH=refs/pull/#/merge -->
      <PRNumber Condition="'$(TF_BUILD)' == 'true' and '$(BUILD_REASON)' == 'PullRequest'">$(BUILD_SOURCEBRANCH.Substring(10).TrimEnd('/merge'))</PRNumber>
      <GitSemVerDashLabel Condition="'$(TF_BUILD)' == 'true' and '$(BUILD_REASON)' == 'PullRequest'">$(GitSemVerDashLabel)-pr$(PRNumber)</GitSemVerDashLabel>
      <GitSemVerDashLabel Condition="'$(APPVEYOR_PULL_REQUEST_NUMBER)' != ''">$(GitSemVerDashLabel)-pr$(APPVEYOR_PULL_REQUEST_NUMBER)</GitSemVerDashLabel>

      <!-- Adjust branch name to CI provided value if available -->
      <GitBranch Condition="'$(SYSTEM_PULLREQUEST_TARGETBRANCH)' != ''">$(SYSTEM_PULLREQUEST_TARGETBRANCH)</GitBranch>
      <GitBranch Condition="'$(SYSTEM_PULLREQUEST_TARGETBRANCH)' == '' and '$(BUILD_SOURCEBRANCHNAME)' != ''">$(BUILD_SOURCEBRANCHNAME)</GitBranch>
      <GitBranch Condition="'$(APPVEYOR_REPO_BRANCH)' != ''">$(APPVEYOR_REPO_BRANCH)</GitBranch>

      <!-- NOTE: build metadata does not affect version matching, so even if you work from a different branch+commit that gets
           rebased+merged later on, the version # might still be the same (provided there weren't additional commits in main
           before the rebase+merge.
      -->
      <_IndexOfBranchSlash>$(GitBranch.LastIndexOf('/'))</_IndexOfBranchSlash>
      <_IndexOfBranchSubstring>$([MSBuild]::Add('$(_IndexOfBranchSlash)', '1'))</_IndexOfBranchSubstring>
      <_GitBranch Condition="'$(_IndexOfBranchSlash)' != '0'">$(GitBranch.Substring($(_IndexOfBranchSubstring)))</_GitBranch>
      <_GitBranch Condition="'$(_IndexOfBranchSlash)' == '0'">$(GitBranch)</_GitBranch>

      <!-- We'll use GitFlow and ship publicly from main, meaning we don't need branch metadata from there -->
      <GitSemVerDashLabel Condition="'$(GitSemVerDashLabel)' == '' and '$(_GitBranch)' != 'main' and '$(_GitBranch.StartsWith(v))' != 'true'">-$(_GitBranch)</GitSemVerDashLabel>
      <SemVerMetadata Condition="'$(GitSemVerDashLabel)' != '-$(_GitBranch)' and '$(_GitBranch)' != 'main'">$(_GitBranch).</SemVerMetadata>
      <SemVerMetadata>$(SemVerMetadata)sha.$(GitCommit)</SemVerMetadata>

      <!-- If there is a pre-release label, fix the major.minor.build and increment the release label digit instead. -->
      <PackageVersion Condition="'$(GitSemVerDashLabel)' != ''">$(GitBaseVersionMajor).$(GitBaseVersionMinor).$(GitCommits)</PackageVersion>
      <!-- If shipping stable, semver the package version -->
      <PackageVersion Condition="'$(GitSemVerDashLabel)' == ''">$(GitSemVerMajor).$(GitSemVerMinor).$(GitSemVerPatch)</PackageVersion>
      <AssemblyVersion>$(GitBaseVersionMajor).$(GitBaseVersionMinor).$(GitBaseVersionPatch)</AssemblyVersion>
      <FileVersion>$(GitSemVerMajor).$(GitSemVerMinor).$(GitSemVerPatch)</FileVersion>
      <InformationalVersion>$(PackageVersion)+$(SemVerMetadata)</InformationalVersion>
    </PropertyGroup>

    <Message Importance="high" Text="CI=$(CI)" />
    <Message Importance="high" Text="TF_BUILD=$(TF_BUILD)" />
    <Message Importance="high" Text="PRNumber=$(PRNumber)" />
    <Message Importance="high" Text="APPVEYOR_PULL_REQUEST_NUMBER=$(APPVEYOR_PULL_REQUEST_NUMBER)" />
    <Message Importance="high" Text="_GitBranch=$(_GitBranch)" />
    <Message Importance="high" Text="GitBaseVersionPatch=$(GitBaseVersionPatch)" />
    <Message Importance="high" Text="GitSemVerDashLabel=$(GitSemVerDashLabel)" />
  </Target>

</Project>
