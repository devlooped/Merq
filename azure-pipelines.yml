name: merq

trigger:
  batch: false
  branches:
    include:
    - main
    - feature/*
    - rel/*
  paths:
    exclude:
    - docs
    - icon

variables:
- group: Xamarin-Secrets
- group: Xamarin Release
- name: Configuration
  value: Release
- name: DotNetVersion
  value: 3.1.x
- name: PackageOutputPath
  value: $(Build.ArtifactStagingDirectory)/package
- name: System.Debug
  value: true
- name: TeamName
  value: "VSCX Platform Tools"
- name: MainBranch
  value: refs/heads/main

resources:
  repositories:
  - repository: templates
    type: github
    name: xamarin/yaml-templates
    ref: refs/heads/main
    endpoint: xamarin

stages:
- stage: Windows
  jobs:
  - job: Build
    pool:
      name: VSEngSS-MicroBuild2022-1ES
    steps:
    - checkout: self
      clean: true
      submodules: recursive

    - task: UseDotNet@2
      inputs:
        version: $(DotNetVersion)
        performMultiLevelLookup: true

    - powershell: |
        dotnet --version
        dotnet --list-sdks
      displayName: 'Show .NET versions'

    - task: NuGetAuthenticate@0
      displayName: Authenticate NuGet feeds
      inputs:
        forceReinstallCredentialProvider: true

    - powershell: |
        $branch = "$(Build.SourceBranch)"
        Write-Host "Branch: ${branch}"
        $buildReason = "$(Build.Reason)"
        Write-Host "Build.Reason: ${buildReason}"
        $codeSignOverride = ''          # Defaulting to empty as opposed to 'false' allows for the template to still determine if signing is needed
        # The template will only set Xamarin.CodeSign to true and enable real sigining for builds triggered against release branches such as 'd17-0'
        # The template does not enable real signing for the main branch and so we enable real signing for main here
        if ($branch -eq "$(MainBranch)") {
          $codeSignOverride = 'true'
        }
        Write-Host "Setting CodeSignOverride: ${codeSignOverride}"
        Write-Host "##vso[task.setvariable variable=CodeSignOverride]$codeSignOverride"
      displayName: 'Set CodeSignOverride'

    - template: jenkins-codesign/signType.v1.yml@templates
      parameters:
        CodeSignOverride: "$(CodeSignOverride)"

    - task: MicroBuildSigningPlugin@2
      inputs:
        signType: "$(Xamarin.SignType)"
        feedSource: 'https://devdiv.pkgs.visualstudio.com/DefaultCollection/_packaging/MicroBuildToolset/nuget/v3/index.json'
      env:
        TeamName: "$(TeamName)"

    # Disabled due to unreliability in loading the service index for source https://devdiv.pkgs.visualstudio.com/_packaging/xamarin-xvs/nuget/v3/index.json. [C:\Users\VssAdministrator\AppData\Local\Temp\nabauqrz.xry\restore.csproj]
    - powershell: |
        # https://stackoverflow.com/questions/58764322/cannot-install-dotnet-ef-tool-on-windows-10
        # https://devdiv.visualstudio.com/DevDiv/_artifacts/feed/xamarin-xvs/NuGet/dotnet-format/6.0.226302/versions
        dotnet tool update -g dotnet-format --version 6.0.226302
        dotnet format -f $(Build.SourcesDirectory)\src --check -v:diag
      displayName: Check .editorconfig compliance
      enabled: false

    - template: dump-environment.yml@templates

    - task: MSBuild@1
      displayName: Build
      inputs:
        solution: src\Merq.sln
        configuration: $(Configuration)
        msbuildArguments: '-r -v:normal -p:Configuration=$(Configuration) -bl:$(Build.ArtifactStagingDirectory)/logs/build.binlog'   # Note: Setting configuration on the task does not appear to be sufficient. Also set as a build property

    - powershell: |
        $filename = "$(Build.SourcesDirectory)\src\Vsix\Merq.Vsix\obj\$(Configuration)\extension.vsixmanifest"
        if ([IO.File]::Exists($filename)) {
          type $filename
        } else {
          Write-Host "File not found: ${filename}"
        }

        $filename = "$(Build.SourcesDirectory)\src\Vsix\Merq.Vsix\bin\$(Configuration)\extension.vsixmanifest"
        if ([IO.File]::Exists($filename)) {
          type $filename
        } else {
          Write-Host "File not found: ${filename}"
        }
      displayName: Show extension.vsixmanifest
      condition: always()

    - task: VSTest@2
      displayName: 'Test'
      timeoutInMinutes: 5
      inputs:
        testAssemblyVer2: |
          **\*Tests.dll
          !**\*IntegrationTests.dll
          !**\*TestAdapter.dll
          !**\obj\**
        codeCoverageEnabled: true
        runInParallel: false
        rerunFailedTests: true
        rerunMaxAttempts: 5

    - task: PublishBuildArtifacts@1
      displayName: 'Logs'
      condition: always()
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/logs'
        ArtifactName: logs

    - task: PublishBuildArtifacts@1
      displayName: 'Artifacts'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/package'
        ArtifactName: package

    - task: MicroBuildCodesignVerify@3
      displayName: 'Verify Signed Files'
      inputs:
        TargetFolders: |
          $(Build.ArtifactStagingDirectory)/package
        ExcludeSNVerify: true
        ApprovalListPathForCerts: '$(Build.SourcesDirectory)/signexclusionlist.csv'

    - task: PublishBuildArtifacts@1
      displayName: 'Symbols'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/artifacts'
        ArtifactName: symbols

- stage: Upload
  jobs:
  - job: Upload
    pool:
      name: AzurePipelines-EO
      demands:
      - ImageOverride -equals AzurePipelinesWindows2022compliant

    steps:
    - checkout: self

    - task: UseDotNet@2
      inputs:
        packageType: runtime
        version: $(DotNetVersion)
        performMultiLevelLookup: true
    - script: 'dotnet tool update -g --version 7.0.0 PowerShell >nul || dotnet tool list -g'
      displayName: UsePowerShell

    - task: DownloadBuildArtifacts@0
      inputs:
        artifactName: package

    - template: dump-environment.yml@templates
    - template: upload-to-storage/win/v1.yml@templates
      parameters:
        ArtifactsDirectory: '$(Build.ArtifactStagingDirectory)/package'
        Azure.ContainerName: 'xvs-merq'
        GitHub.Context: 'artifacts'

    - task: NuGetCommand@2
      displayName: Push Packages
      continueOnError: true
      condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/main'), eq(variables['PushPackages'], 'true')))
      inputs:
        command: push
        packagesToPush: $(Build.ArtifactStagingDirectory)/package/*.nupkg
        nuGetFeedType: external
        publishFeedCredentials: 'xamarin-impl public feed'

- stage: SBOM
  displayName: 'Software Bill of Materials'
  dependsOn:
  - Upload

  jobs:
  - template: compliance/sbom/job.v1.yml@templates          # Software Bill of Materials (SBOM): https://eng.ms/docs/cloud-ai-platform/devdiv/one-engineering-system-1es/1es-docs/secure-supply-chain/ado-sbom-generator
    parameters:
      packageName: 'Mobile Essentials'
      artifactNames: ['package']
      packageFilter: '*.vsix;*.nupkg'
      packageVersionRegex: '(?i)^Merq\.(?<version>\d+\.\d+\.\d+).vsix$'
